#+PROPERTY: header-args :mkdirp yes
#+hugo_base_dir: ../../.hugo-out
#+startup: logdone

* Root section
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:END:

** Home page
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: Ross A. Baker
:END:

This is Ross A. Baker's personal web site.  He's unsure where he's
going with it quite yet, but it will certainly feature tired Simpsons
references.  Ross is a backend developer by trade, so please excuse
any season-one aesthetics.

#+attr_html: :alt He's a perfectly cromulent developer :class perfectly-cromulent-developer
[[file:../hugo/static/img/perfectly-cromulent-developer.gif]]

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  figure.perfectly-cromulent-developer {
      margin: 0 auto;
      max-width: 60%;
  }
  .perfectly-cromulent-developer img {
      max-width: 100%;
      border-radius: 0.5em;
  }
#+end_src

** DONE Contact      :@personal:email:github:mastodon:matrix:twitter:pgp:
CLOSED: [2022-08-27 Sat 14:04]
:PROPERTIES:
:EXPORT_FILE_NAME: contact
:EXPORT_HUGO_LASTMOD: <2022-08-28 Sun 00:12>
:EXPORT_DESCRIPTION: A partial enumeration of addresses, social networks, and PGP public key.
:END:

I'm other places too, but try one of these first.

#+begin_contacts
- Email :: [[mailto:ross@rossabaker.com][ross@rossabaker.com]]
- GitHub :: [[https://github.com/rossabaker][@rossabaker]]
- Matrix :: [[https://matrix.to/#/@ross:rossabaker.com][@ross:rossabaker.com]]
- Mastodon :: [[https://mastodon.social/@rossabaker][@rossabaker@mastodon.social]]
- Twitter :: [[https://twitter.com/rossabaker][@rossabaker]]
#+end_contacts

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  .contacts dl {
      display: grid;
      grid-template-columns: max-content auto;
  }

  dt {
      font-weight: bolder;
      grid-column: 1;
  }

  dd {
      grid-column: 2;
  }
#+end_src

*** PGP

Download my [[file:../hugo/static/keys/0x975BE5BC29D92CA5.pub.asc][public PGP key]].  Its fingerprint is as follows:

#+begin_example
pub   rsa4096/0x975BE5BC29D92CA5 2018-01-31 [SC]
      Key fingerprint = 904C 1537 33DB B010 6915  C0BD 975B E5BC 29D9 2CA5
uid                   [ultimate] Ross A. Baker <ross@rossabaker.com>
sub   rsa4096/0x89FB7DEA8BDEB545 2018-01-31 [E]
      Key fingerprint = 7578 8CFE 8A1B E74E D17D  30AB 89FB 7DEA 8BDE B545
#+end_example

** DONE About                                             :@personal:infobox:
CLOSED: [2022-08-31 Wed 00:23]
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: about
:END:

I don't expect to ever be notable enough for a Wikipedia article, but
we all deserve an infobox.  Here's mine.

#+hugo:more
#+begin_infobox
[[../hugo/static/img/profile.jpg]]

- Name :: Ross A. Baker
- Pronunciation :: /​ɹɔs eɪ beɪ.kɚ/
- Pronouns :: [[https://pronoun.is/he][he/him]]
- Generation :: [[https://en.wikipedia.org/wiki/Xennials][Xennial]]
- Hometown :: [[https://en.wikipedia.org/wiki/Crystal_Lake,_Illinois][Crystal Lake]], [[https://en.wikipedia.org/wiki/Illinois][Illinois]], U.S.
- Residence :: [[https://en.wikipedia.org/wiki/Indianapolis][Indianapolis]], [[https://en.wikipedia.org/wiki/Indiana][Indiana]], U.S.
- Alma mater :: [[https://www.indiana.edu/][Indiana University]]
- Occupation :: software engineer
- Employer :: [[https://www.jackhenry.com/][Jack Henry]]
- Organizations :: [[https://typelevel.org/][Typelevel]], [[https://www.northsidesoccer.com/][Northside Soccer]]
- Style :: functional
- Spouse :: bless her
- Children :: 2
- Dogs :: 2
- Cats :: 1
- Fish :: several
- Amphibians :: a few
- Personality :: BBQ
- ~$EDITOR~ :: Emacs
- HTML tag :: ~<dl>~
- Number :: /e/
- Sandwich :: Italian beef, dipped
- MLB team :: Cubs
- NFL team :: Bears
- NHL team :: Blackhawks
- NBA team :: Pacers
- Interjections :: ope
- Disposition :: curmudgeonly
#+end_infobox

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  .infobox {
      width: fit-content;
      margin: 0 auto;
      border: 1px solid #666;
      padding: 0.5em;

  }

  .infobox img {
      display: block;
      max-width: 45%;
      margin: 0 auto;
  }

  .infobox dl {
      display: inline-grid;
      grid-template-columns: max-content, max-content;
  }

  .infobox dt {
      font-weight: bolder;
      grid-column: 1;
  }

  .infobox dd {
      grid-column: 2;
      margin-bottom: 0.5em;
  }
#+end_src

* Configurations                                        :@tech:configuration:
:PROPERTIES:
:EXPORT_HUGO_SECTION: configs
:END:

** DONE A perfectly cromulent repository                  :git:gitattributes:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: cromulent
:EXPORT_HUGO_LASTMOD: <2022-08-25 Thu 15:06>
:EXPORT_DESCRIPTION: Documents the Git repository that hosts my configurations and the source code for rossabaker.com.
:END:

My [[https://github.com/rossabaker/cromulent][personal Git repository]] contains my all my configurations and
[[https://rossabaker.com/][personal web site]].  Everything is managed in an [[https://orgmode.org/][Org Mode]] file.  A
monorepo is out of character for me, but this setup acts as one source
of truth for what I share and what I run.

*** Original sources

As much as possible, original sources are stored in the ~src~
directory.

*** Materialized sources

Some files that we'd like to document here must be materialized to
specific locations in the repository.  If we can generate the files
transiently in our builds, we do.  If some other tool expects a file
in a specific location, we [[https://medium.com/@clarkbw/managing-generated-files-in-github-1f1989c09dfd][mark the generated version with
.gitattributes]].

First up is the ~.gitattributes~ file itself!

#+begin_src gitattributes :tangle ../../.gitattributes
  .gitattributes  -diff -merge linguist-generated=true
#+end_src

Any file that needs to be checked in, but whose location we're free to
choose, goes to the ~gen~ directory.

#+begin_src gitattributes :tangle ../../.gitattributes
  gen/            -diff -merge linguist-generated=true
#+end_src

** DONE Website                           :website:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: website
:EXPORT_DESCRIPTION: A colophon for rossabaker.com.  Describes the way we convert an Org-Mode file into a website with ox-hugo and Nix.
:END:

*** Website index
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: How rossabaker.com works
:END:

[[https://rossabaker.com/][rossabaker.com]] is sourced from an Org file.  We [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] the
configuration, export the content to Markdown with with [[https://ox-hugo.scripter.co][ox-hugo]], and
convert the Markdown to HTML with [[https://gohugo.io/][Hugo]].

*** DONE Site configuration                       :hugo:org_mode:ox_hugo:nix:
CLOSED: [2022-09-01 Thu 16:48]
:PROPERTIES:
:EXPORT_FILE_NAME: hugo
:END:

A Hugo site can be configured with either TOML or YAML.  I spent my
weirdness budget on a literate config, so let's stick to the default.
#+hugo:more
#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  baseURL = 'https://rossabaker.com'
  languageCode = 'en-us'
  title = 'Ross A. Baker'
#+end_src

**** hugo-mwe

This site is bootstrapped from [[https://gitlab.com/hugo-mwe/hugo-mwe][Hugo MWE]].  A [[https://scripter.co/hugo-modules-importing-a-theme/][hugo module]] would be
easier, but I have not figured out a way to integrate Hugo modules
with [[https://github.com/tweag/gomod2nix][gomod2nix]].  Instead, we'll do it the old-fashioned way and clone
it into ~src/hugo/themes~.

~themesDir~ cannot be a module mount.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  theme = 'hugo-mwe'
  themesDir = 'src/hugo/themes'
#+end_src

Further design comes from the [[*CSS foundation][CSS foundation]].

**** Mounts

Because all this org stuff mucks with the [[https://gohugo.io/getting-started/directory-structure/#readout][normal directory structure]],
we have to give Hugo a few extra hints.  [[https://github.com/gohugoio/hugo/issues/6457#issuecomment-546580193][~assetDir~ is "legacy"]], so
we'll use [[https://gohugo.io/hugo-modules/configuration/#module-config-mounts][module mounts]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [[module.mounts]]
    source = '.hugo-out/layouts'
    target = 'layouts'
  [[module.mounts]]
    source = '.hugo-out/content'
    target = 'content'
  [[module.mounts]]
    source = '.hugo-out/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/static'
    target = 'static'
#+end_src

**** General site parameters

The ~css~ parameter lets us add custom stylesheets to the asset
pipeline.  ~chroma.css~ is [[*Syntax highlighting][generated below]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [Params]
    css = [ 'cromulent.css', 'chroma.css', 'noto-fonts.css', 'ox-hugo.css' ]
    description = "A perfectly cromulent developer."
    username = 'rossabaker'

    [Params.source]
      url = "https://github.com/rossabaker/cromulent"
#+end_src

**** ox-hugo

ox-hugo [[https://ox-hugo.scripter.co/doc/goldmark/#enable-unsafe-html][recommends Goldmark]].  The ~unsafe~ is not as bad as it sounds:

#+begin_quote
While that setting sounds scary, all that does is allow have inline
HTML in your Markdown, as CommonMark allows!
#+end_quote

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.goldmark.renderer]
    unsafe = true
#+end_src

**** Syntax highlighting

The classless style is classless.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.highlight]
    noClasses = false
#+end_src

Generate the ~chroma.css~ file.

#+name: chroma-css
#+begin_src sh :results verbatim
  hugo gen chromastyles --style=github
#+end_src

#+begin_src css :tangle ../../.hugo-out/assets/css/chroma.css :noweb yes :exports none
  <<chroma-css()>>
#+end_src

*** DONE Templates                                            :hugo:html:
CLOSED: [2022-09-01 Thu 16:53]
:PROPERTIES:
:EXPORT_HUGO_SECTION_FRAG: templates
:END:

**** DONE Index
CLOSED: [2022-09-02 Fri 11:28]
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: Templates
:END:

I've eschewed the [[https://themes.gohugo.io/][many community themes]] to lay everything out from
scratch.  I took over a decade off front ends and wanted to see what
I've missed.  If you have no such need, don't follow my footsteps.
There is a lot to unpack here.

**** DONE Base template
CLOSED: [2022-09-02 Fri 09:17]
:PROPERTIES:
:EXPORT_FILE_NAME: base-template
:END:

This [[https://gohugo.io/templates/base/][base template]] defines the outermost HTML for single pages and
lists alike.  Nothing here is extraordinary.  It is a simple
foundation for semantic HTML.  It specifies four blocks:
- [[*Head template][~head~]]
- [[*Header template][~header~]]
- ~main~
- [[*Footer template][~footer~]]
#+hugo:more
All but ~main~ provide a default value.  There is no notion of
"abstract" in a hugo template, so we can't enforce that every other
template provide a ~main~, but this is the expectation.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/baseof.html
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{{ site.Language.Lang }}" lang="{{ site.Language.Lang }}">
      <head>
          {{ block "head" . }}
              {{ partial "head" . }}
          {{ end }}
      </head>

      <body>
          <header>
              {{ block "header" . }}
                  {{ partial "header.html" . }}
              {{ end }}
          </header>

          <main>
              {{ block "main" . }}
              {{ end }}
          </main>

          <footer>
              {{ block "footer" . }}
                  {{ partial "footer.html" . }}
              {{ end }}
          </footer>
      </body>
  </html>
#+end_src

Visually separate the three sections a bit.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > main {
      border-width: 1px 0;
      border-style: solid;
  }
#+end_src

**** DONE Single-page template
CLOSED: [2022-09-02 Fri 12:53]
:PROPERTIES:
:EXPORT_FILE_NAME: single
:END:

Most pages on the site are "single pages".  These are generally the
subtrees in the [[https://github.com/rossabaker/cromulent/blob/main/src/org/rossabaker.org][source]] with ~EXPORT_FILE_NAME~ not equal to ~_index~.
Think of them as the articles.  Indeed, we mark them up in an
~<article>~ tag.
#+hugo:more

#+begin_src html :tangle ../../.hugo-out/layouts/_default/single.html
  {{ define "main" }}
      <article>
          <header>
              <h1>{{ .Title }}</h1>
          </header>
          <main>
              {{ .Content }}
          </main>
          <footer>
              {{ partial "article-info" . }}
          </footer>
      </article>
  {{ end }}
#+end_src

Futher customization is possible by [[https://gohugo.io/content-management/types/][type]].  Certain types get their own
custom [[https://gohugo.io/content-management/front-matter/][front matter]], which we can render with a consistent look and feel.

I would like to define ~article-header~ and ~article-main~ blocks in
this template so less gets repeated in the section overrides.  I'm
still missing something.

**** DONE Talks template                                                :css:
CLOSED: [2022-09-02 Fri 12:48]
:PROPERTIES:
:EXPORT_FILE_NAME: talks
:END:

Talks get their own single-page template based on custom front matter.
#+hugo:more

- ~.Venue~ :: Where the talk was delivered.  Supports markdown.  Protip:
  put it in quotes if it begins with a link.
- ~.Source~ :: The source repository associated with the talk.
- ~.Slides~ :: If it's a =*.pdf=, it's rendered as an ~<object>~.
  Otherwise, put it in an ~<iframe>~.  Make sure it links to content
  served over https, or it won't load.

Metadata appears in the article header.

#+begin_src html :tangle ../../.hugo-out/layouts/talks/single.html
  Ayo wtf

  {{ define "article-header" }}
      <h1>{{ .Title }}</h1>
      <dl>
          {{ if .Params.venue }}
              <dt>Venue</dt>
              <dd>{{ .Params.Venue | markdownify }}</dd>

              <dt>Source code</dt>
              <dd><a href="{{ .Params.Source }}">{{ .Params.Source }}</a></dd>
          {{ end }}
      </dl>
  {{ end }}
#+end_src

The content should be the abstract of the talk.  Slides are rendered
inline below.

#+begin_src html :tangle ../../.hugo-out/layouts/talks/single.html
  {{ define "article-main" }}
      {{ .Content }}
      {{ if .Params.Slides }}
          <div class="slides">
              {{ if strings.HasSuffix .Params.Slides ".pdf" }}
                  <object data="{{ .Params.Slides | absURL }}" type="application/pdf">
                  </object>
              {{ else }}
                  <iframe src="{{ .Params.Slides | absURL }}">
                  </iframe>
              {{ end }}
          </div>
          <p>Download the <a href="{{ .Params.Slides | absURL }}">slides</a>.
      {{ end }}
  {{ end }}
#+end_src

This is approximately how Bootstrap styles an embed, and is optimized
for a 4x3 slide deck.  We're going to need something more
sophisticated eventually.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .slides {
      position: relative;
  }
  .slides::before {
      content: "";
      display: block;
      padding-top: 78%;
  }
  .slides object, .slides iframe {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      height: 100%;
      width: 100%;
  }
#+end_src

**** DONE List template
CLOSED: [2022-09-02 Fri 12:55]
:PROPERTIES:
:EXPORT_FILE_NAME: list
:END:

The list template renders for the home page, section listings,
taxonomies, and terms.  By default, we render our article summaries
in reverse order of modification.
#+hugo:more
#+begin_src html :tangle ../../.hugo-out/layouts/_default/list.html
  {{ define "main" }}
      <h1>{{ .Title }}</h1>

      {{ with .Content }}
          {{ . }}
      {{ end }}

      <h2>Recently updated</h2>

      <ul class="article-summaries">
          {{ range cond .IsHome site.RegularPages.ByLastmod.Reverse .Pages.ByLastmod.Reverse }}
              <li>
                  {{ partial "article-summary" . }}
              </li>
          {{ end }}
      </ul>
  {{ end }}
#+end_src

**** DONE Taxonomy tag cloud              :taxonomy:tag_cloud:css:emacs_lisp:
CLOSED: [2022-09-02 Fri 13:07]
:PROPERTIES:
:EXPORT_FILE_NAME: terms
:END:

This is the taxonomy list page, which is rendered as a tag cloud.  We
use it for categories and tags.  Terms are rendered in a font
proportional to the logarithm of its page count.
#+hugo:more

The least-used term is assigned an importance between =0=.  The most
used term is assigned an importance of =6=.  Everything else falls in
between.  We choose a logarithm because we expect the distribution to
roughly follow a power law.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/terms.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>
      <ul class="terms {{.Name | urlize}}">
          {{ $plural := .Data.Plural }}
          {{ $max := math.Log (len (index .Data.Terms.ByCount 0).Pages) }}
          {{ range .Data.Terms.Alphabetical }}
              {{ $size := math.Floor (mul (div (math.Log (len .Pages)) $max) 6) }}
              <li>
                  <a href="/{{ $plural }}/{{ .Name }}" class="{{ printf "terms-size-%.0f" $size }}">{{ .Name }}</a>
                  <sub>{{ len .Pages }}</sub>
              </li>
          {{ end }}
      </ul>

      {{ with .Content }}
          {{ . }}
      {{ end }}
  {{ end }}
#+end_src

Creating font sizes for the CSS is boring.  Let's spit them out in Emacs Lisp!

#+name: terms-sizes-css
#+begin_src emacs-lisp
  (mapconcat (lambda (x)
               (let ((size (expt 2.0 (/ (- x 2) 4.0))))
                 (format ".terms-size-%i { font-size: %1.3fem; }" x size)))
             (number-sequence 0 6)
             "\n")
#+end_src

Look at all the CSS we didn't have to write:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :noweb yes
  <<terms-sizes-css()>>
#+end_src

We still need to handwrite a bit.  This centers the ~.terms~ and
reserves enough line height for the largest:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .terms {
      list-style: none;
      padding-left: 0;
      display: flex;
      flex-wrap: wrap;
      align-items: center;
      justify-content: center;
      line-height: 2.25em;
  }
#+end_src

The elements are a regular inline list:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .terms li {
      display: inline;
      margin: 0 0.5rem;
  }
#+end_src

Our site convention is that tags receive a ~#~ prefix and categories
get a ~@~.  Give them a tasteful, muted style:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .terms.tags li::before {
      content: "#";
  }
  .terms.categories li::before {
      content: "@";
  }
#+end_src

Mute the color and count, because it's all about the terms:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .terms li {
      color: #aaa;
  }
#+end_src

**** DONE Taxonomy term template
CLOSED: [2022-09-02 Fri 13:10]
:PROPERTIES:
:EXPORT_FILE_NAME: term
:END:

Taxonomy terms (e.g., ~/categories/tech~) are rendered in a simple
template that lists the article summaries in reverse order of modification.
#+hugo:more
#+begin_src html :tangle ../../.hugo-out/layouts/_default/term.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>
      <ul class="article-summaries">
          {{ range .Pages.ByLastmod.Reverse }}
              <li>
                  {{ partial "article-summary" . }}
              </li>
          {{ end }}
      </ul>

      {{ with .Content }}
          {{ . }}
      {{ end }}
  {{ end }}
#+end_src

**** DONE Head template
CLOSED: [2022-09-02 Fri 10:29]
:PROPERTIES:
:EXPORT_FILE_NAME: head
:END:

This template defines our default ~<head>~ element, and is not often
customized.  Most of it originated in [[https://gitlab.com/hugo-mwe/hugo-mwe][hugo-mwe]].
#+hugo:more
UTF-8 ought to be enough characters for anyone.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  <meta charset="utf-8">
#+end_src

[[https://developer.mozilla.org/en-US/docs/Web/HTML/Viewport_meta_tag][Improve responsiveness]].

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  <meta name="viewport" content="width=device-width, initial-scale=1">
#+end_src

Set the title tag.  Always include the site title.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  {{- if .IsHome }}
      <title>{{ site.Title }}</title>
  {{- else }}
      <title>{{ site.Title }}: {{ .Title }}</title>
  {{- end }}
#+end_src

Set the description, either at the site or page level.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  {{ $description := cond .IsHome .Site.Params.Description .Params.Description }}
  {{ if $description }}
      <meta name="description" content="{{ $description }}">
  {{ end }}
#+end_src

Load our own CSS and JavaScript through the [[https://gohugo.io/hugo-pipes/introduction/][Hugo asset pipeline]].

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  {{ range $css_file := site.Params.css | default (slice "bmfw.css" "ox-hugo.css") }}
      {{ $css_asset_path := printf "css/%s" $css_file }}
      {{ $css := resources.Get $css_asset_path | minify | fingerprint }}
      <link rel="stylesheet" href="{{ $css.RelPermalink }}">
      <!-- Enable HTTP/2 Push -->
      <link rel="preload" href="{{ $css.RelPermalink }}" as="style">
  {{ end }}

  {{ range $js_file := site.Params.js }}
      {{ $js_asset_path := printf "js/%s" $js_file }}
      {{ $js := resources.Get $js_asset_path | minify | fingerprint }}
      <script defer src="{{ $js.RelPermalink }}"></script>
      <!-- Enable HTTP/2 Push -->
      <link rel="preload" href="{{ $js.RelPermalink }}" as="script">
  {{ end }}
#+end_src

Render our RSS feed.  Putting it in a ~<link>~ integrates with various
[[https://addons.mozilla.org/en-US/firefox/search/?q=rss][RSS readers]].

#+begin_src html :tangle ../../.hugo-out/layouts/partials/head.html
  {{ range .AlternativeOutputFormats -}}
      {{ printf `<link rel="%s" type="%s" href="%s" title="%s" />` .Rel .MediaType.Type .Permalink (printf "%s for %s" (.Name | title) site.Title) | safeHTML }}
  {{ end -}}
#+end_src

**** DONE Article summary                                               :css:
CLOSED: [2022-09-02 Fri 13:12]
:PROPERTIES:
:EXPORT_FILE_NAME: article-summary
:END:

Provide a standard article summary for our various list templates.  It
includes the title, dates, category, tags, and either the page
description or summary.
#+hugo:more

#+begin_src html :tangle ../../.hugo-out/layouts/partials/article-summary.html
  <article>
      <header>
          <h1><a href="{{ .Permalink }}">{{ .Title }}</a></h1>
      </header>
      <main>
          {{ if .Description }}
              {{ .Description | markdownify }}
          {{ else if .Truncated }}
              {{ .Summary }}
          {{ else }}
              {{ .Content }}
          {{ end }}
      </main>
      <footer>
        {{ partial "article-info" . }}
      </footer>
  </article>
#+end_src

A list of summaries should be unbulleted and separated by a thin line:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  ul.article-summaries {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  ul.article-summaries > li {
      border-bottom: thin solid #999;
  }
#+end_src

**** DONE Article info                                                  :css:
CLOSED: [2022-09-02 Fri 13:16]
:PROPERTIES:
:EXPORT_FILE_NAME: article-info
:END:

Article info appears at the bottom of every article and article
summary on the site.  It describes:

- The content type
- The date
- The modification date
- The category, usually one, prefixed with ~@~
- The tags, usually many, prefixed with ~#~
#+hugo:more
~<dl>~ has long been my favorite idiosyncratic HTML tag.  Maybe I'm
abusing it here, but I like the result.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/article-info.html
  <div class="article-info">
      <dl>
          <div class="type">
              <dt>Type</dt>
              {{ if ne .Type "page" }}
                  <dd><a href="{{ .Type | relURL }}">{{ .Type | singularize | humanize }}</a></dd>
              {{ else }}
                  <dd>Page</dd>
              {{ end }}
          </div>
          <div class="published">
              <dt>Published</dt>
              <dd>{{ dateFormat "2006-01-02" .Date }}</dd>
          </div>
          <div class="last-modified">
              <dt>Last updated</dt>
              <dd>{{ dateFormat "2006-01-02" .Lastmod }}</dd>
          </div>
          <div class="taxonomies">
              <dt>Taxonomies</dt>
              <dd>
                  <dl>
                      {{ if .Params.categories }}
                          <dt>Categories</dt>
                          <dd>
                              <ul>
                                  {{ range (sort .Params.categories) }}
                                      <li class="category"><a href="{{ (print "/categories/" .) | absURL }}">{{ . | humanize }}</a></li>
                                  {{ end }}
                              </ul>
                          </dd>
                      {{ end }}

                      {{ if .Params.tags }}
                          <dt>Tags</dt>
                          <dd>
                              <ul>
                                  {{ range (sort .Params.tags) }}
                                      <li class="tag"><a href="{{ (print "/tags/" .) | absURL }}">{{ . }}</a></li>
                                  {{ end }}
                              </ul>
                          </dd>
                      {{ end }}
                  </dl>
              </dd>
          </div>
      </dl>
  </div>
#+end_src

CSS.  Lunch hour is almost over, so I'll describe it another day.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .article-info {
      margin: 1em 0;
      font-size: 0.816em;
  }

  .article-info .type dt {
      display: none;
  }

  .article-info .type dd {
      display: inline;
      margin-left: 0;
  }

  .article-info .type, .article-info .published, .article-info .last-modified {
      display: inline-flex;
  }

  .published dt, .article-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .article-info .published dt, .article-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .article-info .published dd, .article-info .last-modified dd {
      display: inline;
      margin-left: 0;
      margin-right: 1ch;
  }

  .article-info .taxonomies > dt {
      display: none;
  }

  .article-info .taxonomies dd dl dt {
      display: none;
  }

  .article-info .taxonomies dd {
      margin-left: 0;
  }

  .article-info .taxonomies dd dl dd {
      display: inline;
  }

  .article-info .taxonomies dd dl dd ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: inline;
  }

  .article-info .taxonomies dd dl dd li {
      display: inline;
  }

  .article-info .taxonomies dd dl dd li.category::before {
      content: '@';
      color: #666;
  }

  .article-info .taxonomies dd dl dd li.tag::before {
      content: '#';
      margin-left: 1ch;
      color: #666;
  }

  .article-info a {
      text-decoration: none;
  }
#+end_src

**** DONE Header template                                    :css:emacs_lisp:
CLOSED: [2022-09-02 Fri 11:41]
:PROPERTIES:
:EXPORT_FILE_NAME: header
:END:

Our header is straightforward semantic HTML, with a ~<h1>~, ~<p>~,
~<nav>~, etc.  It establishes the brand, and my brand is to be a
complete dweeb.  Therefore, we're going to abuse CSS to render it as
an Emacs Lisp definition.
#+hugo:more

***** HTML

We reference a ~username~ site parameter, because my full name doesn't
make any sense as a Lisp variable.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/header.html
  <h1><a href="{{ "/" | absURL }}">{{ .Site.Params.username }}</a></h1>
  <p>{{ .Site.Params.description }}</p>
  <nav>
      <ul>
          {{ range $name, $_ := .Site.Taxonomies.categories }}
              <li><a href="{{ "/categories" | absURL }}/{{ $name }}">{{ $name }}</a></li>
          {{ end }}
          <li><a href="{{ "/tags" | absURL }}">tags</a></li>
      </ul>
  </nav>
#+end_src

***** CSS

Make it a little bigger.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header {
      font-size: 1.225em;
  }
#+end_src

It's monospace, because it's "code".

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header {
      font-family: "Noto Sans Mono", monospace;
  }
#+end_src

Render each element as a flex:

Introduce the Lisp syntax as CSS content.  It's sloppy that the
~ul::after~ closes both lists, but I couldn't get it to eliminate
the whitespace between the ~</ul>~ and the ~</header>~.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header h1::before {
      content: "(defvar ";
  }
  body > header p::before {
      content: "\"";
  }
  body > header p::after {
      content: "\"";
  }
  body > header ul::before {
      content: "'(";
  }
  body > header ul::after {
      content: "))";
  }
#+end_src

Mute all the frou-frou.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header::before, body > header::after,
  body > header ::before, body > header ::after {
      color: #aaa;
      font-weight: lighter;
      white-space: pre-wrap;
  }
#+end_src

~M-x indent-region~:

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header :first-child {
      padding-left: 0;
  }

  body > header > * {
      padding-left: 2ch;
  }
#+end_src

It's fine and good that the header is bold, but otherwise we want it
to look like the rest.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header h1 {
      font-size: 1em;
      line-height: inherit;
      margin: 0;
      font-family: "Noto Sans Mono", monospace;
  }
#+end_src

The site subtitle becomes our "docstring".

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header p {
      margin: 0;
      font-style: italic;
      color: #aaa;
  }
#+end_src

Setting ~display: inline-flex~ on the link eats the whitespace around
the generated parens.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header ul {
      display: inline-flex;
      list-style: none;
      margin: 0;
  }
#+end_src

Render the HTML list as a Lispy, inline list.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header li {
      display: inline;
  }
  body > header li {
      padding-right: 1ch;
  }
  body > header li:last-child {
      padding-right: 0;
  }
#+end_src

**** DONE Footer template
CLOSED: [2022-09-02 Fri 10:35]
:PROPERTIES:
:EXPORT_FILE_NAME: footer
:END:

We currently have a minimalist ~<footer>~ that links to our contact
info.  Social links eventually belong here.
#+hugo:more
#+begin_src html :tangle ../../.hugo-out/layouts/partials/footer.html
  <address>
      <a href="{{ "/contact" | absURL }}">Ross A. Baker</a>
      <a href="https://pronoun.is/he">(he/him)</a>
  </address>
#+end_src

*** DONE Build website with Nix :hugo:ox_hugo:nix:babel:
CLOSED: [2022-09-01 Thu 16:54]
:PROPERTIES:
:EXPORT_FILE_NAME: build
:END:

The website is just another package in our flake.
#+hugo:more
#+begin_src nix :tangle ../../gen/website/default.nix
  { src, emacsNativeComp, hugo, stdenv }:

  let
    siteEmacs = emacsNativeComp.pkgs.withPackages (epkgs: [
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    buildInputs = [ siteEmacs hugo ];
    buildPhase = ''
      cd ..
      ${siteEmacs}/bin/emacs -Q --batch --script ${./export.el}
      ${hugo}/bin/hugo --config .hugo-out/config.toml
    '';
    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

~export.el~ is a small Emacs script that finds the Org file and
exports its contents with ox-hugo.

#+begin_src emacs-lisp :tangle ../../gen/website/export.el
  (require 'ox-hugo)
  (require 'ob-shell)

  (put 'org-hugo-external-file-extensions-allowed-for-copying 'safe-local-variable 'listp)
  (find-file "src/org/rossabaker.org")
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle)
  (mkdir "../../.hugo-out/static")
  (org-hugo-export-wim-to-md t)
#+end_src

**** Local Nix build

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

**** Development

For a more iterative experience with live reload in the browser, try:

#+begin_src sh :tangle no
  hugo serve --disableFastRender --config .hugo-out/config.toml
#+end_src

*** DONE CSS foundation                               :css:google_fonts:noto:
CLOSED: [2022-08-30 Tue 14:26]
:PROPERTIES:
:EXPORT_FILE_NAME: style
:EXPORT_HUGO_LASTMOD: <2022-09-01 Thu 10:54>
:END:

We strive for [[https://en.wikipedia.org/wiki/Semantic_HTML][semantic HTML]].  The styles presented here provide a
solid foundation, independent of the [[https://gohugo.io/hugo-modules/theme-components/][Hugo theme]], or even the choice to
use Hugo at all.  These rules are presently deployed to rossabaker.com,
but could conceivably be used in future projects.
#+hugo:more
**** Fonts

The [[https://en.wikipedia.org/wiki/Noto_fonts][Noto fonts]] look nice and have a full glyph set.

+We serve them up with [[https://fonts.google.com/][Google Fonts]] with these links in our ~<head>~+.
Google Fonts [[https://cookie-script.com/blog/google-fonts-and-gdpr][violates the GDPR]], so we self host.  I downloaded all the
Noto variants from Google Fonts, and ran them through [[https://transfonter.org/][Transfonter]].

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  html {
      font-family: "Noto Sans", sans-serif;
  }

  h1, h2, h3, h4, h5, h6 {
      font-family: "Noto Serif", serif;
  }

  code, kbd, pre, samp, var {
      font-family: "Noto Sans Mono", monospace;
  }
#+end_src

**** Responsive width

Reset the body to take up the entire window.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body {
      width: 100%;
      margin: 0;
      padding: 0;
  }
#+end_src

~border-box~ means that the padding is included in the 100%.  Without
it, the content is 100% of the window, but shifted by the left
padding.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > * {
      box-sizing: border-box;
      padding: 0 1.5em;
      width: 100%;
      margin: 1.5em auto;
  }

  @media (min-width: 576px) {
      body > * {
          max-width: 510px;
      }
  }

  @media (min-width: 768px) {
      body > * {
          max-width: 700px;
      }
  }

  @media (min-width: 992px) {
      body > * {
          max-width: 920px;
      }
  }

  @media (min-width: 1200px) {
      body > * {
          max-width: 1130px;
      }
  }
#+end_src

*** Code rendering

Put a scroll bar on code samples, but only where necessary.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  pre {
      max-width: 100%;
      overflow-x: auto;
  }
#+end_src

Give the code samples a little more room to breathe.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  pre {
      background: #f8f8f8;
      border: 1px dotted #ccc;
      border-radius: 1em;
      padding: 1em;
  }
#+end_src

* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: projects
:END:

** DONE Personal Weather Station             :@personal:weather:indianapolis:
CLOSED: [2022-08-28 Sun 21:03]
:PROPERTIES:
:EXPORT_FILE_NAME: personal-weather-station
:EXPORT_DESCRIPTION: Data from my personal weather station in Indianapolis, Indiana.
:END:

I run an [[https://ambientweather.net/][Ambient Weather]] WS-1400-IP weather station in the Castleton
neighborhood of Indianapolis and share its [[https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c][public dashboard]].  The
anemometer is not raised high enough for accuracy, but the rest is
reasonably accurate.

#+begin_export html
  <iframe class="weather-station" frameborder="0" src="https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c?embed=true"></iframe>
#+end_export

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  .weather-station {
      width: 500px;
      height: 400px;
      max-width: 100%;
      display: block;
      margin: 1.5em auto;
  }
#+end_src

* Talks
:PROPERTIES:
:EXPORT_HUGO_SECTION: talks
:END:

** IndyScala                                          :@tech:scala:indyscala:
*** Akka IO and Netty                                            :akka:netty:
:PROPERTIES:
:EXPORT_FILE_NAME: akka-io-and-netty
:EXPORT_DATE: <2013-11-04 Mon>
:EXPORT_PUBLISH_DATE: <2022-08-29 Mon 13:20>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/) at [E-gineering](https://e-gineering.com), November 2013"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala/akka-io-demo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides /pdf/akka-io-and-netty.pdf
:END:
*** Algebras in Scala                                               :algebra:
:PROPERTIES:
:EXPORT_FILE_NAME: algebras-in-scala
:EXPORT_DATE: <2019-12-02 Mon>
:EXPORT_PUBLISH_DATE: <2022-08-30 Tue 14:51>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/) at [E-gineering](https://e-gineering.com), December 2019"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala/algebras
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides https://indyscala.org/algebras
:END:

Scala developers like to talk about "algebras".  Or when they're
feeling particularly precious, "algebrae."  Ross gives an overview,
and promises any references to "F-algebra" are not a taunt about your
ninth grade report card.
*** Anorm                                                         :anorm:sql:
:PROPERTIES:
:EXPORT_FILE_NAME: anorm
:EXPORT_DATE: <2012-08-13 Mon>
:EXPORT_PUBLISH_DATE: <2022-08-30 Tue 21:56>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/), August 2012"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala-anorm/
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides pdf/anorm.pdf
:END:

* Podcasts...
:PROPERTIES:
:EXPORT_HUGO_SECTION: podcasts
:END:
** CoRecursive Episode #017 :@tech:podcast:corecursive:scala:http4s:functional_programming:remote_work:
:PROPERTIES:
:EXPORT_FILE_NAME: corecursive-17
:EXPORT_DATE: <2018-07-27 Fri>
:EXPORT_HUGO_PUBLISHDATE: <2022-08-29 Mon 00:10>
:END:

I was interviewed by Adam Gordon Bell on the [[https://corecursive.com/017-http4s-with-ross-baker/][CoRecursive podcast]].
#+hugo:more

#+begin_quote
The promise of functional programming is code that is easier to reason
about, test and maintain. Referential transparency means there is no
extra context to worry about, we can just focus on inputs and
outputs. Examples of functional programming in the small are
plentiful. Fibonacci is easy to write as a function but what about fp
in the large?

Http4s is a web framework written in scala that takes a pure
functional approach to building http services. Ross Baker is a
contributor to http4s and he explains the benefits of this
approach. We also touch on the benefits of working remotely, since he
and I have both been doing it for some time.
#+end_quote

** The Scala Logs :@tech:podcast:http4s:haskell:hockey:scala_logs:
:PROPERTIES:
:EXPORT_FILE_NAME: scala-logs
:EXPORT_DATE: <2020-02-08 Sat>
:EXPORT_HUGO_PUBLISHDATE: <2022-08-29 Mon 00:09>
:END:

It was my honor to join Zach McCoy on the [[https://open.spotify.com/episode/57RHzk5M7gJjLnV5nfehJo][first full episode of The
Scala Logs]], where we talked http4s, Haskell, and hockey.

* Books
:PROPERTIES:
:EXPORT_HUGO_SECTION: books
:END:

** Scalatra in Action                 :@tech:scala:scalatra:http:sbt:scalate:
:PROPERTIES:
:EXPORT_FILE_NAME: scalatra-in-action
:EXPORT_DATE: <2016-05-23 Mon>
:EXPORT_HUGO_PUBLISHDATE: <2022-08-30 Tue 22:44>
:END:

[[https://www.manning.com/books/scalatra-in-action][Scalatra in Action]] was written by [[https://constructiveproof.com/][Dave Hrycyszyn,]] Stefan Ollinger, and
me and covers the [[https://scalatra.org/][Scalatra micro-framework]] in depth.  Scalatra is a
port of Ruby's Sinatra to Scala.

#+hugo:more

#+attr_html: :alt Scalatra in Action book cover :class scalatra-in-action
[[https://www.manning.com/books/scalatra-in-action][file:../hugo/static/img/scalatra-in-action.jpg]]

From the publisher:

#+begin_quote
_Scalatra in Action_ covers the Scalatra framework in its entirety,
starting with concepts such as request routing, input handling,
actions, and HTTP responses. For readers who don't already know Scala,
the book introduces the Scala language and sbt, the Simple Build
Tool. You'll learn how to use Scalatra's powerful templating engine,
Scalate. It also covers advanced topics such as data access, handling
heavy load, asynchronicity, securing your application, designing
RESTful APIs, and real-time web programming.
#+end_quote

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  figure.scalatra-in-action {
      margin: 0 auto;
      max-width: 360px;
      max-height: 452px
  }

  .scalatra-in-action {
      display: block;
      width: auto;
      height: auto;
      margin: 0 auto;
  }
#+end_src




* Local Variables :noexport:

We need to prepend ~"asc"~ to the defaults to share our PGP public key.

Local Variables:
org-hugo-external-file-extensions-allowed-for-copying: ("asc" "jpg" "jpeg" "tiff" "png" "svg" "gif" "mp4" "pdf" "odt" "doc" "ppt" "xls" "docx" "pptx" "xlsx")
End:
