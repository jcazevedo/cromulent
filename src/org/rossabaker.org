#+PROPERTY: header-args :mkdirp yes
#+hugo_base_dir: ../../.hugo-out
#+startup: logdone

* Configurations
:PROPERTIES:
:EXPORT_HUGO_SECTION: configs
:END:

** DONE Cromulent
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: cromulent
:END:

My [[https://github.com/rossabaker/cromulent][personal Git repository]] contains my all my configurations and
[[https://rossabaker.com/][personal web site]].  Everything is managed in an [[https://orgmode.org/][Org Mode]] file.  A
monorepo is out of character for me, but this setup acts as one source
of truth, so what I publish is what I run.

*** Original sources

As much as possible, original sources are stored in the ~src~
directory.

*** Generated sources

Some files that we'd like to document here must be materialized to
specific locations in the repository.  There are files I'd like to
document here, but must to be materialized to a specific place in my
[[https://github.com/rossabaker/rossabaker][personal Git repository]].  Checking in generated source is generally
poor practice, but a ~.gitattributes~ file [[https://medium.com/@clarkbw/managing-generated-files-in-github-1f1989c09dfd][mitigates the damage]].

First up is the ~.gitattributes~ file itself!

#+begin_src gitattributes :tangle ../../.gitattributes
  .gitattributes  -diff -merge linguist-generated=true
#+end_src

Any file whose location we're free to choose, typically because it's
included or configurable elsewhere, goes to the ~gen~ directory.

#+begin_src gitattributes :tangle ../../.gitattributes
  gen/            -diff -merge linguist-generated=true
#+end_src

** DONE Website
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: website
:EXPORT_HUGO_PUBLISHDATE: <2022-08-24 Wed 18:57>
:END:

[[https://rossabaker.com/][rossabaker.com]] is sourced from an Org file.  We [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] the
configuration, export the content to Markdown with with [[https://ox-hugo.scripter.co][ox-hugo]], and
convert the Markdown to HTML with [[https://gohugo.io/][Hugo]].

*** Site configuration

A Hugo site can be configured with either TOML or YAML.  I spent my
weirdness budget on a literate config, so let's stick to the default.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  baseURL = 'http://rossabaker.com/'
  languageCode = 'en-us'
  title = 'Ross A. Baker'
#+end_src

**** Directories

Because all this org stuff mucks with the [[https://gohugo.io/getting-started/directory-structure/#readout][normal directory structure]],
we have to give Hugo a few extra hints.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  assetDir = 'src/hugo/assets'
  layoutDir = 'src/hugo/layouts'
  staticDir = 'src/hugo/static'
  contentDir = '.hugo-out/content'
#+end_src

**** ox-hugo

ox-hugo [[https://ox-hugo.scripter.co/doc/goldmark/#enable-unsafe-html][recommends Goldmark]].  The ~unsafe~ is not as bad as it sounds:

#+begin_quote
While that setting sounds scary, all that does is allow have inline
HTML in your Markdown, as CommonMark allows!
#+end_quote

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.goldmark.renderer]
    unsafe = true
#+end_src

*** Layouts

This site is bootstrapped from [[https://gitlab.com/hugo-mwe/hugo-mwe][Hugo MWE]].  It's not published as a
theme, so I bootstrapped it with [[https://github.com/newren/git-filter-repo][git-filter-repo]] to rewrite the
commits into ~src/hugo~.  As we customize them, we'll document the
atrocities here.

*** Home page
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:END:

# How about a nice 90s homage while we move in

#+attr_html: :alt Under Construction
[[./img/under-construction.gif]]

*** Build

The website is just another package in our flake.

#+begin_src nix :tangle ../../gen/website/default.nix
  { src, emacsNativeComp, hugo, stdenv }:

  let
    siteEmacs = emacsNativeComp.pkgs.withPackages (epkgs: [
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    buildInputs = [ siteEmacs hugo ];
    buildPhase = ''
      cd ..
      ${siteEmacs}/bin/emacs -Q --batch --script ${./export.el}
      ${hugo}/bin/hugo --config .hugo-out/config.toml
    '';
    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

~export.el~ is a small Emacs script that finds the Org file and
exports its contents with ox-hugo.

#+begin_src emacs-lisp :tangle ../../gen/website/export.el
  (require 'ox-hugo)
  (find-file "src/org/rossabaker.org")
  (org-babel-tangle)
  (mkdir "../../.hugo-out/static")
  (org-hugo-export-wim-to-md t)
#+end_src

**** Local Nix build

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

**** Development

For a more iterative experience with live reload in the browser, try:

#+begin_src sh :tangle no
  hugo serve --disableFastRender --config .hugo-out/config.toml
#+end_src
