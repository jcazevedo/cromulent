#+PROPERTY: header-args :mkdirp yes
#+hugo_base_dir: ../../.hugo-out
#+startup: logdone

* Root section
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:END:

** Home page
:PROPERTIES:
:EXPORT_FILE_NAME: _index
:EXPORT_TITLE: Ross A. Baker
:END:

This is Ross A. Baker's personal web site.  He's unsure where he's
going with it quite yet, but it will certainly feature tired Simpsons
references.  Ross is a backend developer by trade, so please excuse
any season-one aesthetics.

#+attr_html: :alt He's a perfectly cromulent developer :class perfectly-cromulent-developer
[[file:../hugo/static/img/perfectly-cromulent-developer.gif]]

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  figure.perfectly-cromulent-developer {
      margin: 0 auto;
      max-width: 60%;
  }
  .perfectly-cromulent-developer img {
      max-width: 100%;
      border-radius: 0.5em;
  }
#+end_src

** DONE Contact      :@personal:email:github:mastodon:matrix:twitter:pgp:
CLOSED: [2022-08-27 Sat 14:04]
:PROPERTIES:
:EXPORT_FILE_NAME: contact
:EXPORT_HUGO_LASTMOD: <2022-08-28 Sun 00:12>
:EXPORT_DESCRIPTION: A partial enumeration of addresses, social networks, and PGP public key.
:END:

I'm other places too, but try one of these first.

#+begin_contacts
- Email :: [[mailto:ross@rossabaker.com][ross@rossabaker.com]]
- GitHub :: [[https://github.com/rossabaker][@rossabaker]]
- Matrix :: [[https://matrix.to/#/@ross:rossabaker.com][@ross:rossabaker.com]]
- Mastodon :: [[https://mastodon.social/@rossabaker][@rossabaker@mastodon.social]]
- Twitter :: [[https://twitter.com/rossabaker][@rossabaker]]
#+end_contacts

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  .contacts dl {
      display: grid;
      grid-template-columns: max-content auto;
  }

  dt {
      font-weight: bolder;
      grid-column: 1;
  }

  dd {
      grid-column: 2;
  }
#+end_src

*** PGP

Download my [[file:../hugo/static/keys/0x975BE5BC29D92CA5.pub.asc][public PGP key]].  Its fingerprint is as follows:

#+begin_example
pub   rsa4096/0x975BE5BC29D92CA5 2018-01-31 [SC]
      Key fingerprint = 904C 1537 33DB B010 6915  C0BD 975B E5BC 29D9 2CA5
uid                   [ultimate] Ross A. Baker <ross@rossabaker.com>
sub   rsa4096/0x89FB7DEA8BDEB545 2018-01-31 [E]
      Key fingerprint = 7578 8CFE 8A1B E74E D17D  30AB 89FB 7DEA 8BDE B545
#+end_example

* Configurations                                        :@tech:configuration:
:PROPERTIES:
:EXPORT_HUGO_SECTION: configs
:END:

** DONE A perfectly cromulent repository                  :git:gitattributes:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: cromulent
:EXPORT_HUGO_LASTMOD: <2022-08-25 Thu 15:06>
:EXPORT_DESCRIPTION: Documents the Git repository that hosts my configurations and the source code for rossabaker.com.
:END:

My [[https://github.com/rossabaker/cromulent][personal Git repository]] contains my all my configurations and
[[https://rossabaker.com/][personal web site]].  Everything is managed in an [[https://orgmode.org/][Org Mode]] file.  A
monorepo is out of character for me, but this setup acts as one source
of truth for what I share and what I run.

*** Original sources

As much as possible, original sources are stored in the ~src~
directory.

*** Materialized sources

Some files that we'd like to document here must be materialized to
specific locations in the repository.  If we can generate the files
transiently in our builds, we do.  If some other tool expects a file
in a specific location, we [[https://medium.com/@clarkbw/managing-generated-files-in-github-1f1989c09dfd][mark the generated version with
.gitattributes]].

First up is the ~.gitattributes~ file itself!

#+begin_src gitattributes :tangle ../../.gitattributes
  .gitattributes  -diff -merge linguist-generated=true
#+end_src

Any file that needs to be checked in, but whose location we're free to
choose, goes to the ~gen~ directory.

#+begin_src gitattributes :tangle ../../.gitattributes
  gen/            -diff -merge linguist-generated=true
#+end_src

** DONE Website                               :hugo:org_mode:ox_hugo:nix:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: website
:EXPORT_HUGO_LASTMOD: <2022-08-29 Mon 18:25>
:EXPORT_DESCRIPTION: A colophon for rossabaker.com.  Describes the way we convert an Org-Mode file into a website with ox-hugo and Nix.
:END:

[[https://rossabaker.com/][rossabaker.com]] is sourced from an Org file.  We [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] the
configuration, export the content to Markdown with with [[https://ox-hugo.scripter.co][ox-hugo]], and
convert the Markdown to HTML with [[https://gohugo.io/][Hugo]].

*** Site configuration

A Hugo site can be configured with either TOML or YAML.  I spent my
weirdness budget on a literate config, so let's stick to the default.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  baseURL = 'https://rossabaker.com'
  languageCode = 'en-us'
  title = 'Ross A. Baker'
#+end_src

**** hugo-mwe

This site is bootstrapped from [[https://gitlab.com/hugo-mwe/hugo-mwe][Hugo MWE]].  A [[https://scripter.co/hugo-modules-importing-a-theme/][hugo module]] would be
easier, but I have not figured out a way to integrate Hugo modules
with [[https://github.com/tweag/gomod2nix][gomod2nix]].  Instead, we'll do it the old-fashioned way and clone
it into ~src/hugo/themes~.

~themesDir~ cannot be a module mount.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  theme = 'hugo-mwe'
  themesDir = 'src/hugo/themes'
#+end_src

**** Mounts

Because all this org stuff mucks with the [[https://gohugo.io/getting-started/directory-structure/#readout][normal directory structure]],
we have to give Hugo a few extra hints.  [[https://github.com/gohugoio/hugo/issues/6457#issuecomment-546580193][~assetDir~ is "legacy"]], so
we'll use [[https://gohugo.io/hugo-modules/configuration/#module-config-mounts][module mounts]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [[module.mounts]]
    source = '.hugo-out/layouts'
    target = 'layouts'
  [[module.mounts]]
    source = '.hugo-out/content'
    target = 'content'
  [[module.mounts]]
    source = '.hugo-out/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/static'
    target = 'static'
#+end_src

**** General site parameters

The ~css~ parameter lets us add custom stylesheets to the asset
pipeline.  ~chroma.css~ is [[*Syntax highlighting][generated below]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [Params]
    css = [ 'cromulent.css', 'chroma.css', 'ox-hugo.css' ]
    description = "A perfectly cromulent developer."
    username = 'rossabaker'

    [Params.source]
      url = "https://github.com/rossabaker/cromulent"
#+end_src

**** ox-hugo

ox-hugo [[https://ox-hugo.scripter.co/doc/goldmark/#enable-unsafe-html][recommends Goldmark]].  The ~unsafe~ is not as bad as it sounds:

#+begin_quote
While that setting sounds scary, all that does is allow have inline
HTML in your Markdown, as CommonMark allows!
#+end_quote

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.goldmark.renderer]
    unsafe = true
#+end_src

**** Syntax highlighting

The classless style is classless.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.highlight]
    noClasses = false
#+end_src

Generate the CSS!

#+name: generate-chroma-css
#+begin_src sh :results none
  mkdir -p ../../.hugo-out/assets/css
  hugo gen chromastyles --style=github > ../../.hugo-out/assets/css/chroma.css
#+end_src

#+call: generate-chroma-css()

*** Layouts

**** Templates

***** Base layout

This defines the outermost HTML.  Every other template fills in the
header, main, and footer.

This isn't customized from hugo-mwe yet, but we need to move it into
layouts for our ~chroma.css~ asset to work.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/baseof.html
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{{ site.Language.Lang }}" lang="{{ site.Language.Lang }}">
      <head>
          <link href="https://gmpg.org/xfn/11" rel="profile">
          <meta charset="utf-8">

          <!-- Enable responsiveness on mobile devices-->
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">

          <!-- No referrer: https://webbkoll.dataskydd.net/en/ -->
          <meta name="referrer" content="no-referrer">

          <!-- Below fixes the favicon.ico 404 error
               https://stackoverflow.com/a/43791570/1219634
          -->
          <link rel="shortcut icon" href="#" />

          {{- if .IsHome }}
              <title>{{ site.Title }}</title>
              {{ with site.Params.Description }}
                  <meta name="description" content="{{ . }}">
              {{ end }}
          {{- else }}
              <title>{{ .Title }} - {{ site.Title }}</title>
              <meta name="description" content="{{ .Summary }}">
          {{- end }}

          <link rel="preconnect" href="https://fonts.googleapis.com">
          <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
          <link href="https://fonts.googleapis.com/css2?family=Fira+Code:wght@400;700&family=Fira+Sans:ital,wght@0,400;0,700;1,400;1,700&display=swap" rel="stylesheet">

          <!-- CSS -->
          {{ range $css_file := site.Params.css | default (slice "bmfw.css" "ox-hugo.css") }}
              {{ $css_asset_path := printf "css/%s" $css_file }}
              {{ $css := resources.Get $css_asset_path | minify | fingerprint }}
              <link rel="stylesheet" href="{{ $css.RelPermalink }}">
              <!-- Enable HTTP/2 Push -->
              <link rel="preload" href="{{ $css.RelPermalink }}" as="style">
          {{ end }}

          <!-- JS -->
          {{ range $js_file := site.Params.js }}
              {{ $js_asset_path := printf "js/%s" $js_file }}
              {{ $js := resources.Get $js_asset_path | minify | fingerprint }}
              <script defer src="{{ $js.RelPermalink }}"></script>
              <!-- Enable HTTP/2 Push -->
              <link rel="preload" href="{{ $js.RelPermalink }}" as="script">
          {{ end }}

          <!-- RSS -->
          <!-- https://gohugo.io/templates/rss/#reference-your-rss-feed-in-head -->
          {{ range .AlternativeOutputFormats -}}
              {{ printf `<link rel="%s" type="%s" href="%s" title="%s" />` .Rel .MediaType.Type .Permalink (printf "%s for %s" (.Name | title) site.Title) | safeHTML }}
          {{ end -}}
      </head>

      <body>
          <header>
              {{ block "header" . }}
                  {{ partial "header.html" . }}
              {{ end }}
          </header>

          <main>
              {{ block "main" . }}
              {{ end }}
          </main>

          <footer>
              {{ block "footer" . }}
                  {{ partial "footer.html" . }}
              {{ end }}
          </footer>
      </body>
  </html>
#+end_src

Visually separate the three sections a bit.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > main {
      border-width: 1px 0;
      border-style: solid;
  }
#+end_src
***** Single pages

#+begin_src html :tangle ../../.hugo-out/layouts/_default/single.html
  {{ define "main" }}
      <article>
          <header>
              <h1>{{ .Title }}</h1>
          </header>
          <main>
              {{ .Content }}
          </main>
          <footer>
              {{ partial "post-info" . }}
          </footer>
      </article>
    {{ end }}
#+end_src

****** Talks

The talks section has its own front matter.  We give it a different template.

#+begin_src html :tangle ../../.hugo-out/layouts/talks/single.html
  {{ define "main" }}
            <article>
          <header>
              <h1>{{ .Title }}</h1>
              <dl>
                  {{ if .Params.venue }}
                      <dt>Venue</dt>
                      <dd>{{ .Params.Venue | markdownify }}</dd>

                      <dt>Source code</dt>
                      <dd><a href="{{ .Params.Source }}">{{ .Params.Source }}</a></dd>
                  {{ end }}
              </dl>
          </header>
          <main>
              {{ .Content }}
              {{ if .Params.Slides }}
                  <div class="slides">
                      <object data="{{ .Params.Slides | absURL }}" type="application/pdf">
                          <p>Download the <a href="{{ .Params.Slides | absURL }}">slides</a>.
                      </object>
                  </div>
              {{ end }}
          </main>
          <footer>
              {{ partial "post-info" . }}
          </footer>
      </article>
  {{ end }}
#+end_src

This is approximately what Bootstrap does, and is optimized for a 4x3
slide deck. We're going to need something more sophisticated
eventually.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .slides {
      position: relative;
  }
  .slides::before {
      content: "";
      display: block;
      padding-top: 78%;
  }
  .slides object {
      position: absolute;
      top: 0;
      bottom: 0;
      left: 0;
      height: 100%;
      width: 100%;
  }
#+end_src

***** List pages

This renders for the home page, section listings, taxonomies, and
terms.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/list.html
  {{ define "main" }}
      <h1>{{ .Title }}</h1>

      {{ with .Content }}
          {{ . }}
      {{ end }}

      <h2>Recently updated</h2>

      <ul class="article-summaries">
          {{ range site.RegularPages.ByLastmod.Reverse }}
              <li>
                  {{ partial "article-summary" . }}
              </li>
          {{ end }}
      </ul>
  {{ end }}
#+end_src

***** Taxonomy terms list

This is the taxonomy list page (e.g., ~/categories~).

#+begin_src html :tangle ../../.hugo-out/layouts/_default/terms.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>
      <ul>
          {{ $plural := .Data.Plural }}
          {{ range .Data.Terms.Alphabetical }}
              <li>
                  <a href="/{{ $plural }}/{{ .Name }}">{{ .Name }}</a>
              </li>
          {{ end }}
      </ul>

      {{ with .Content }}
          {{ . }}
      {{ end }}
  {{ end }}
#+end_src

***** Taxonomy term

This is the taxonomy term page (e.g., ~/categories/tech~).

#+begin_src html :tangle ../../.hugo-out/layouts/_default/term.html
  {{ define "main" }}
      <h1>{{ .Name }}</h1>
      <ul class="article-summaries">
          {{ range .Pages.ByLastmod.Reverse }}
              <li>
                  {{ partial "article-summary" . }}
              </li>
          {{ end }}
      </ul>

      {{ with .Content }}
          {{ . }}
      {{ end }}
  {{ end }}
#+end_src

**** Partial templates

***** Article summary

Provide a standard article summary for list views.  It includes the
title, dates, category, tags, and either the page description or
summary.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/article-summary.html
  <article>
      <header>
          <h1><a href="{{ .Permalink }}">{{ .Title }}</a></h1>
      </header>
      <main>
          {{ if .Description }}
              {{ .Description | markdownify }}
          {{ else if .Truncated }}
              {{ .Summary }}
          {{ else }}
              {{ .Content }}
          {{ end }}
      </main>
      <footer>
        {{ partial "post-info" . }}
      </footer>
  </article>
#+end_src

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  ul.article-summaries {
      list-style: none;
      margin: 0;
      padding: 0;
  }

  ul.article-summaries > li {
      border-bottom: thin solid #999;
  }
#+end_src

***** Post info

~<dl>~ has long been my favorite idiosyncratic HTML tag.  Maybe I'm
abusing it here, but I like the result.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/post-info.html
  <div class="post-info">
      <dl>
          <div class="type">
              <dt>Type</dt>
              <dd><a href="{{ .Type | relURL }}">{{ .Type | singularize | humanize }}</a></dd>
          </div>
          <div class="published">
              <dt>Published</dt>
              <dd>{{ dateFormat "2006-01-02" .Date }}</dd>
          </div>
          <div class="last-modified">
              <dt>Last updated</dt>
              <dd>{{ dateFormat "2006-01-02" .Lastmod }}</dd>
          </div>
          <div class="taxonomies">
              <dt>Taxonomies</dt>
              <dd>
                  <dl>
                      <dt>Categories</dt>
                      <dd>
                          <ul>
                              {{ range .Params.categories }}
                                  <li class="category"><a href="{{ (print "/categories/" .) | absURL }}">{{ . | humanize }}</a></li>
                              {{ end }}
                          </ul>
                      </dd>

                      <dt>Tags</dt>
                      <dd>
                          <ul>
                              {{ range .Params.tags }}
                                  <li class="tag"><a href="{{ (print "/tags/" .) | absURL }}">{{ . }}</a></li>
                              {{ end }}
                          </ul>
                      </dd>
                  </dl>
              </dd>
          </div>
      </dl>
  </div>
#+end_src

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  .post-info {
      margin: 1em 0;
      font-size: 0.816em;
  }

  .post-info .type dt {
      display: none;
  }

  .post-info .type dd {
      display: inline;
      margin-left: 0;
  }

  .post-info .type, .post-info .published, .post-info .last-modified {
      display: inline-flex;
  }

  .published dt, .post-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .post-info .published dt, .post-info .last-modified dt {
      display: inline;
      font-weight: normal;
      text-transform: lowercase;
      color: #999;
      margin-right: 1ch;
  }

  .post-info .published dd, .post-info .last-modified dd {
      display: inline;
      margin-left: 0;
      margin-right: 1ch;
  }

  .post-info .taxonomies > dt {
      display: none;
  }

  .post-info .taxonomies dd dl dt {
      display: none;
  }

  .post-info .taxonomies dd {
      margin-left: 0;
  }

  .post-info .taxonomies dd dl dd {
      display: inline;
  }

  .post-info .taxonomies dd dl dd ul {
      list-style: none;
      margin: 0;
      padding: 0;
      display: inline;
  }

  .post-info .taxonomies dd dl dd li {
      display: inline;
  }

  .post-info .taxonomies dd dl dd li.category::before {
      content: '@';
      color: #666;
  }

  .post-info .taxonomies dd dl dd li.tag::before {
      content: '#';
      margin-left: 1ch;
      color: #666;
  }

  .post-info a {
      text-decoration: none;
  }
#+end_src

***** Header

Our gimmick is to render this semantic HTML header as Emacs Lisp.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/header.html
  <h1><a href="{{ "/" | absURL }}">{{ .Site.Params.username }}</a></h1>
  <p>{{ .Site.Params.description }}</p>
  <nav>
      <ul>
          {{ range $name, $_ := .Site.Taxonomies.categories }}
              <li><a href="{{ "/categories" | absURL }}/{{ $name }}">{{ $name }}</a></li>
          {{ end }}
          <li><a href="{{ "/tags" | absURL }}">tags</a></li>
      </ul>
  </nav>
#+end_src

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > header {
      display: block;
      font-family: "Fira Mono", monospace;
      font-size: 1.225em;
  }
  body > header::before {
      content: "(defvar ";
      color: #aaa;
  }
  body > header h1 {
      font-size: 1em;
      display: inline;
      margin: 0;
      line-height: inherit;
  }
  body > header p {
      margin: 0;
      padding-left: 2ch;
      font-style: italic;
      color: #aaa;
  }
  body > header p::before {
      content: "\"";
  }
  body > header p::after {
      content: "\"";
  }
  body > header nav {
      display: inline-flex;
  }
  body > header ul {
      display: flex;
      list-style: none;
      margin: 0;
      padding: 0 0 0 2ch;
  }
  body > header ul::before {
      content: "'(";
      color: #aaa;
  }
  body > header ul::after {
      content: "))";
      color: #aaa;
  }
  body > header li {
      display: inline;
  }
  body > header li {
      padding-right: 1ch;
  }
  body > header li:last-child {
      padding-right: 0;
  }
#+end_src

***** Footer

#+begin_src html :tangle ../../.hugo-out/layouts/partials/footer.html
  <address>
      Ross A. Baker
      <a href="https://pronoun.is/he">(he/him)</a>
  </address>
#+end_src

*** General styling

Establish some responsive boundaries.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body {
      width: 100%;
      margin: 0;
      padding: 0;
  }

  body > * {
      width: 100%;
      margin: 1.5em auto;
  }

  @media (min-width: 576px) {
      body > * {
          max-width: 510px;
      }
  }

  @media (min-width: 768px) {
      body > * {
          max-width: 700px;
      }
  }

  @media (min-width: 992px) {
      body > * {
          max-width: 920px;
      }
  }

  @media (min-width: 1200px) {
      body > * {
          max-width: 1130px;
      }
  }
#+end_src

I look at the Fira font all day anyway.  Why not here?

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body {
      font-family: "Fira Sans", serif;
  }

  code, kbd, pre, samp, var {
      font-family: "Fira Code", monospace;
  }
#+end_src

Give the code samples a little more room to breathe.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  pre.chroma {
      background: #f8f8f8;
      border: 1px dotted #ccc;
      border-radius: 1em;
      padding: 1em;
  }
#+end_src

Put a scroll bar on code samples, but only where necessary.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  pre {
      max-width: 100%;
      overflow-x: auto;
  }
#+end_src

*** Build

The website is just another package in our flake.

#+begin_src nix :tangle ../../gen/website/default.nix
  { src, emacsNativeComp, hugo, stdenv }:

  let
    siteEmacs = emacsNativeComp.pkgs.withPackages (epkgs: [
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    buildInputs = [ siteEmacs hugo ];
    buildPhase = ''
      cd ..
      ${siteEmacs}/bin/emacs -Q --batch --script ${./export.el}
      ${hugo}/bin/hugo --config .hugo-out/config.toml
    '';
    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

~export.el~ is a small Emacs script that finds the Org file and
exports its contents with ox-hugo.

#+begin_src emacs-lisp :tangle ../../gen/website/export.el
  (require 'ox-hugo)
  (require 'ob-shell)

  (put 'org-hugo-external-file-extensions-allowed-for-copying 'safe-local-variable 'listp)
  (find-file "src/org/rossabaker.org")
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle)
  (mkdir "../../.hugo-out/static")
  (org-hugo-export-wim-to-md t)
#+end_src

**** Local Nix build

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

**** Development

For a more iterative experience with live reload in the browser, try:

#+begin_src sh :tangle no
  hugo serve --disableFastRender --config .hugo-out/config.toml
#+end_src

* Projects
:PROPERTIES:
:EXPORT_HUGO_SECTION: projects
:END:

** DONE Personal Weather Station             :@personal:weather:indianapolis:
CLOSED: [2022-08-28 Sun 21:03]
:PROPERTIES:
:EXPORT_FILE_NAME: personal-weather-station
:EXPORT_DESCRIPTION: Data from my personal weather station in Indianapolis, Indiana.
:END:

I run an [[https://ambientweather.net/][Ambient Weather]] WS-1400-IP weather station in the Castleton
neighborhood of Indianapolis and share its [[https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c][public dashboard]].  The
anemometer is not raised high enough for accuracy, but the rest is
reasonably accurate.

#+begin_export html
  <iframe class="weather-station" frameborder="0" src="https://ambientweather.net/devices/public/b78b5bb0e59646a78a623a940937335c?embed=true"></iframe>
#+end_export

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css :exports none
  .weather-station {
      width: 500px;
      height: 400px;
      max-width: 100%;
      display: block;
      margin: 1.5em auto;
  }
#+end_src

* Talks
:PROPERTIES:
:EXPORT_HUGO_SECTION: talks
:END:

** IndyScala                                          :@tech:scala:indyscala:
*** Akka IO and Netty                                            :akka:netty:
:PROPERTIES:
:EXPORT_FILE_NAME: akka-io-and-netty
:EXPORT_DATE: <2013-11-04 Mon>
:EXPORT_PUBLISH_DATE: <2022-08-29 Mon 13:20>
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :venue "[IndyScala](http://indyscala.org/) at [E-gineering](https://e-gineering.com), November 2013"
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :source https://github.com/indyscala/akka-io-demo
:EXPORT_HUGO_CUSTOM_FRONT_MATTER+: :slides /pdf/akka-io-and-netty.pdf
:END:

* Podcasts...
:PROPERTIES:
:EXPORT_HUGO_SECTION: podcasts
:END:
** CoRecursive Episode #017 :@tech:podcast:corecursive:scala:http4s:functional_programming:remote_work:
:PROPERTIES:
:EXPORT_FILE_NAME: corecursive-17
:EXPORT_DATE: <2018-07-27 Fri>
:EXPORT_HUGO_PUBLISHDATE: <2022-08-29 Mon 00:10>
:END:

I was interviewed by Adam Gordon Bell on the [[https://corecursive.com/017-http4s-with-ross-baker/][CoRecursive podcast]].
#+hugo:more

#+begin_quote
The promise of functional programming is code that is easier to reason
about, test and maintain. Referential transparency means there is no
extra context to worry about, we can just focus on inputs and
outputs. Examples of functional programming in the small are
plentiful. Fibonacci is easy to write as a function but what about fp
in the large?

Http4s is a web framework written in scala that takes a pure
functional approach to building http services. Ross Baker is a
contributor to http4s and he explains the benefits of this
approach. We also touch on the benefits of working remotely, since he
and I have both been doing it for some time.
#+end_quote

** The Scala Logs :@tech:podcast:http4s:haskell:hockey:scala_logs:
:PROPERTIES:
:EXPORT_FILE_NAME: scala-logs
:EXPORT_DATE: <2020-02-08 Sat>
:EXPORT_HUGO_PUBLISHDATE: <2022-08-29 Mon 00:09>
:END:

It was my honor to join Zach McCoy on the [[https://open.spotify.com/episode/57RHzk5M7gJjLnV5nfehJo][first full episode of The
Scala Logs]], where we talked http4s, Haskell, and hockey.

* Local Variables :noexport:

We need to prepend ~"asc"~ to the defaults to share our PGP public key.

Local Variables:
org-hugo-external-file-extensions-allowed-for-copying: ("asc" "jpg" "jpeg" "tiff" "png" "svg" "gif" "mp4" "pdf" "odt" "doc" "ppt" "xls" "docx" "pptx" "xlsx")
End:
