#+PROPERTY: header-args :mkdirp yes
#+hugo_base_dir: ../../.hugo-out
#+startup: logdone

* Home page
:PROPERTIES:
:EXPORT_HUGO_SECTION: /
:EXPORT_FILE_NAME: _index
:END:

# How about a nice 90s homage while we move in

#+attr_html: :alt Under Construction
[[./img/under-construction.gif]]

* Configurations                                        :@tech:configuration:
:PROPERTIES:
:EXPORT_HUGO_SECTION: configs
:END:

** DONE A perfectly cromulent repository                  :git:gitattributes:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: cromulent
:EXPORT_HUGO_LASTMOD: <2022-08-26 Fri 00:26>
:END:

My [[https://github.com/rossabaker/cromulent][personal Git repository]] contains my all my configurations and
[[https://rossabaker.com/][personal web site]].  Everything is managed in an [[https://orgmode.org/][Org Mode]] file.  A
monorepo is out of character for me, but this setup acts as one source
of truth for what I share and what I run.

*** Original sources

As much as possible, original sources are stored in the ~src~
directory.

*** Materialized sources

Some files that we'd like to document here must be materialized to
specific locations in the repository.  If we can generate the files
transiently in our builds, we do.  If some other tool expects a file
in a specific location, we [[https://medium.com/@clarkbw/managing-generated-files-in-github-1f1989c09dfd][mark the generated version with
.gitattributes]].

First up is the ~.gitattributes~ file itself!

#+begin_src gitattributes :tangle ../../.gitattributes
  .gitattributes  -diff -merge linguist-generated=true
#+end_src

Any file that needs to be checked in, but whose location we're free to
choose, goes to the ~gen~ directory.

#+begin_src gitattributes :tangle ../../.gitattributes
  gen/            -diff -merge linguist-generated=true
#+end_src

** DONE Website                               :hugo:org_mode:ox_hugo:nix:
CLOSED: [2022-08-24 Wed 15:04]
:PROPERTIES:
:EXPORT_FILE_NAME: website
:EXPORT_HUGO_LASTMOD: <2022-08-26 Fri 00:11>
:END:

[[https://rossabaker.com/][rossabaker.com]] is sourced from an Org file.  We [[https://orgmode.org/manual/Extracting-Source-Code.html][tangle]] the
configuration, export the content to Markdown with with [[https://ox-hugo.scripter.co][ox-hugo]], and
convert the Markdown to HTML with [[https://gohugo.io/][Hugo]].

*** Site configuration

A Hugo site can be configured with either TOML or YAML.  I spent my
weirdness budget on a literate config, so let's stick to the default.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  baseURL = 'http://rossabaker.com/'
  languageCode = 'en-us'
  title = 'Ross A. Baker'
#+end_src

**** hugo-mwe

This site is bootstrapped from [[https://gitlab.com/hugo-mwe/hugo-mwe][Hugo MWE]].  A [[https://scripter.co/hugo-modules-importing-a-theme/][hugo module]] would be
easier, but I have not figured out a way to integrate Hugo modules
with [[https://github.com/tweag/gomod2nix][gomod2nix]].  Instead, we'll do it the old-fashioned way and clone
it into ~src/hugo/themes~.

~themesDir~ cannot be a module mount.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  theme = 'hugo-mwe'
  themesDir = 'src/hugo/themes'
#+end_src

**** Mounts

Because all this org stuff mucks with the [[https://gohugo.io/getting-started/directory-structure/#readout][normal directory structure]],
we have to give Hugo a few extra hints.  [[https://github.com/gohugoio/hugo/issues/6457#issuecomment-546580193][~assetDir~ is "legacy"]], so
we'll use [[https://gohugo.io/hugo-modules/configuration/#module-config-mounts][module mounts]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [[module.mounts]]
    source = '.hugo-out/layouts'
    target = 'layouts'
  [[module.mounts]]
    source = '.hugo-out/content'
    target = 'content'
  [[module.mounts]]
    source = '.hugo-out/assets'
    target = 'assets'
  [[module.mounts]]
    source = 'src/hugo/static'
    target = 'static'
#+end_src

**** General site parameters

The ~css~ parameter lets us add custom stylesheets to the asset
pipeline.  ~chroma.css~ is [[*Syntax highlighting][generated below]].

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [Params]
    css = [ 'cromulent.css', 'chroma.css', 'bmfw.css', 'ox-hugo.css' ]
    description = "A perfectly cromulent developer."
    username = 'rossabaker'

    [Params.source]
      url = "https://github.com/rossabaker/cromulent"
#+end_src

**** ox-hugo

ox-hugo [[https://ox-hugo.scripter.co/doc/goldmark/#enable-unsafe-html][recommends Goldmark]].  The ~unsafe~ is not as bad as it sounds:

#+begin_quote
While that setting sounds scary, all that does is allow have inline
HTML in your Markdown, as CommonMark allows!
#+end_quote

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.goldmark.renderer]
    unsafe = true
#+end_src

**** Syntax highlighting

The classless style is classless.

#+begin_src conf-toml :tangle ../../.hugo-out/config.toml
  [markup.highlight]
    noClasses = false
#+end_src

Generate the CSS!

#+name: generate-chroma-css
#+begin_src sh :results none
  mkdir -p ../../.hugo-out/assets/css
  hugo gen chromastyles --style=github > ../../.hugo-out/assets/css/chroma.css
#+end_src

#+call: generate-chroma-css()

*** Layouts

**** Templates

***** Base layout

This defines the outermost HTML.  Every other template fills in the
header, main, and footer.

This isn't customized from hugo-mwe yet, but we need to move it into
layouts for our ~chroma.css~ asset to work.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/baseof.html
  <!DOCTYPE html>
  <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="{{ site.Language.Lang }}" lang="{{ site.Language.Lang }}">
      <head>
          <link href="https://gmpg.org/xfn/11" rel="profile">
          <meta charset="utf-8">

          <!-- Enable responsiveness on mobile devices-->
          <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=5">

          <!-- No referrer: https://webbkoll.dataskydd.net/en/ -->
          <meta name="referrer" content="no-referrer">

          <!-- Below fixes the favicon.ico 404 error
               https://stackoverflow.com/a/43791570/1219634
          -->
          <link rel="shortcut icon" href="#" />

          {{- if .IsHome }}
              <title>{{ site.Title }}</title>
              {{ with site.Params.Description }}
                  <meta name="description" content="{{ . }}">
              {{ end }}
          {{- else }}
              <title>{{ .Title }} - {{ site.Title }}</title>
              <meta name="description" content="{{ .Summary }}">
          {{- end }}

          <!-- CSS -->
          {{ range $css_file := site.Params.css | default (slice "bmfw.css" "ox-hugo.css") }}
              {{ $css_asset_path := printf "css/%s" $css_file }}
              {{ $css := resources.Get $css_asset_path | minify | fingerprint }}
              <link rel="stylesheet" href="{{ $css.RelPermalink }}">
              <!-- Enable HTTP/2 Push -->
              <link rel="preload" href="{{ $css.RelPermalink }}" as="style">
          {{ end }}

          <!-- JS -->
          {{ range $js_file := site.Params.js }}
              {{ $js_asset_path := printf "js/%s" $js_file }}
              {{ $js := resources.Get $js_asset_path | minify | fingerprint }}
              <script defer src="{{ $js.RelPermalink }}"></script>
              <!-- Enable HTTP/2 Push -->
              <link rel="preload" href="{{ $js.RelPermalink }}" as="script">
          {{ end }}

          <!-- RSS -->
          <!-- https://gohugo.io/templates/rss/#reference-your-rss-feed-in-head -->
          {{ range .AlternativeOutputFormats -}}
              {{ printf `<link rel="%s" type="%s" href="%s" title="%s" />` .Rel .MediaType.Type .Permalink (printf "%s for %s" (.Name | title) site.Title) | safeHTML }}
          {{ end -}}
      </head>

      <body>
          {{ block "header" . }}
          {{ end }}

          {{ block "main" . }}
          {{ end }}

          {{ block "footer" . }}
          {{ end }}
      </body>
  </html>
#+end_src

Visually separate the three sections a bit.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  body > main {
      border-width: 1px 0;
      border-style: solid;
      margin: 1.5rem 0;
  }
#+end_src

***** Single pages

#+begin_src html :tangle ../../.hugo-out/layouts/_default/single.html
  {{ define "header" }}
      <header>
          {{ partial "header.html" . }}
      </header>
  {{ end }}

  {{ define "main" }}
      <main>
          <article>
              <header>
                  <h1>{{ .Title }}</h1>
                  {{ with .Description }}
                      <blockquote>
                          {{ . | markdownify | emojify }}
                      </blockquote>
                  {{ end }}
                  {{ if (not .Date.IsZero) }}
                      Published on
                      <time datetime="{{ dateFormat "Jan 2, 2006" .Date }}">
                          {{ dateFormat "Jan 2, 2006" .Date }}
                      </time><br />
                  {{ end }}
                  {{ if (not .Lastmod.IsZero) }}
                      Updated on
                      <time datetime="{{ dateFormat "Jan 2, 2006" .Lastmod }}">
                          {{ dateFormat "Jan 2, 2006" .Lastmod }}
                      </time><br />
                  {{ end }}
              </header>
              <a id="top"></a>
              {{ .Content }}
          </article>
      </main>
  {{ end }}

  {{ define "footer" }}
      <footer>
          {{ partial "footer.html" . }}
          {{ $commit := (partial "get_commit" .Page) }}

          <a href="../">Go Up</a>
          | <a href="{{ site.BaseURL }}">Home</a>
          {{ partial "source_code" (dict "page" . "prefix" "|") }}
      </footer>
  {{ end }}
#+end_src

***** List pages

This renders for the home page, section listings, taxonomies, and
terms.

#+begin_src html :tangle ../../.hugo-out/layouts/_default/list.html
  {{ define "header" }}
      <header>
          {{ partial "header.html" . }}
      </header>
  {{ end }}

  {{ define "main" }}
      <main>
          {{ if not .IsHome }}
          <h1>{{ .Title }}</h1>
          {{ end }}

          <ul>
              {{ range site.RegularPages.ByLastmod.Reverse }}
                  <li>
                      <a href="{{ .Permalink }}">{{ .Title }}</a>
                      {{ if (not .Date.IsZero) }}
                          {{ if .IsHome }}
                              <small>
                                  —
                                  <time datetime="{{ dateFormat "Jan 2, 2006" .Date }}">
                                      {{ dateFormat "Jan 2, 2006" .Date }}
                                  </time>
                              </small>
                          {{ else }}
                              <time datetime="{{ dateFormat "Jan 2, 2006" .Date }}">
                                  {{ dateFormat "Jan 2, 2006" .Date }}
                              </time>
                          {{ end }}
                      {{ end }}
                  </li>
              {{ end }}
          </ul>

          {{ with .Content }}
              {{ . }}
          {{ end }}
      </main>
  {{ end }}

  {{ define "footer" }}
      <footer>
          {{ partial "footer.html" . }}
          {{ if (not .IsHome) }}
              <a href="../">Go Up</a>
              | <a href="{{ site.BaseURL }}">Home</a>
              |
          {{ end }}
          {{ range .AlternativeOutputFormats }}
              {{ $name_upper := .Name | upper }}
              {{ if (or (eq $name_upper "RSS") (eq $name_upper "ATOM")) }}
                  {{ printf `<a href="%s">%s</a>` .Permalink $name_upper | safeHTML }}
              {{ end }}
          {{ end }}
          | {{ partial "source_code" (dict "page" .) }}
      </footer>
  {{ end }}
#+end_src

***** Taxonomy terms list

This is the taxonomy list page (e.g., ~/categories~).

#+begin_src html :tangle ../../.hugo-out/layouts/_default/terms.html
  {{ define "header" }}
      <header>
          {{ partial "header.html" . }}
      </header>
  {{ end }}

  {{ define "main" }}
      <main>
          <h1>{{ .Name }}</h1>
          <ul>
              {{ $plural := .Data.Plural }}
              {{ range .Data.Terms.Alphabetical }}
                  <li>
                      <a href="/{{ $plural }}/{{ .Name }}">{{ .Name }}</a>
                  </li>
              {{ end }}
          </ul>

          {{ with .Content }}
              {{ . }}
          {{ end }}
      </main>
  {{ end }}

  {{ define "footer" }}
      <footer>
          {{ partial "footer.html" . }}
          <a href="../">Go Up</a>
          | <a href="{{ site.BaseURL }}">Home</a>
          |
          {{ range .AlternativeOutputFormats }}
              {{ $name_upper := .Name | upper }}
              {{ if (or (eq $name_upper "RSS") (eq $name_upper "ATOM")) }}
                  {{ printf `<a href="%s">%s</a>` .Permalink $name_upper | safeHTML }}
              {{ end }}
          {{ end }}
          | {{ partial "source_code" (dict "page" .) }}
      </footer>
  {{ end }}
#+end_src

***** Taxonomy term

This is the taxonomy term page (e.g., ~/categories/tech~).

#+begin_src html :tangle ../../.hugo-out/layouts/_default/term.html
  {{ define "header" }}
      <header>
          {{ partial "header.html" . }}
      </header>
  {{ end }}

  {{ define "main" }}
      <main>
          <h1>{{ .Name }}</h1>
          <ul>
              {{ range .Pages.ByLastmod.Reverse }}
                  <li>
                      <a href="{{ .RelPermalink }}">{{ .Title }}</a>
                      {{ if (not .Date.IsZero) }}
                          {{ if .IsHome }}
                              <small>
                                  —
                                  <time datetime="{{ dateFormat "Jan 2, 2006" .Date }}">
                                      {{ dateFormat "Jan 2, 2006" .Date }}
                                  </time>
                              </small>
                          {{ else }}
                              <time datetime="{{ dateFormat "Jan 2, 2006" .Date }}">
                                  {{ dateFormat "Jan 2, 2006" .Date }}
                              </time>
                          {{ end }}
                      {{ end }}
                  </li>
              {{ end }}
          </ul>

          {{ with .Content }}
              {{ . }}
          {{ end }}
      </main>
  {{ end }}

  {{ define "footer" }}
      <footer>
          {{ partial "footer.html" . }}
          <a href="../">Go Up</a>
          | <a href="{{ site.BaseURL }}">Home</a>
          |
          {{ range .AlternativeOutputFormats }}
              {{ $name_upper := .Name | upper }}
              {{ if (or (eq $name_upper "RSS") (eq $name_upper "ATOM")) }}
                  {{ printf `<a href="%s">%s</a>` .Permalink $name_upper | safeHTML }}
              {{ end }}
          {{ end }}
          | {{ partial "source_code" (dict "page" .) }}
      </footer>
  {{ end }}
#+end_src

**** Partial templates

***** Header

Our gimmick is to render the header as Emacs Lisp.

#+begin_src html :tangle ../../.hugo-out/layouts/partials/header.html
  <pre>(defvar <strong><a href="{{ site.BaseURL }}">{{ .Site.Params.username }}</a></strong>
    &#34;<i>{{ .Site.Params.description }}</i>&#34;
    '(<a href="/categories">categories</a> <a href="/tags">tags</a>))</pre>
#+end_src

Mute the frou-frou a bit.

#+begin_src css :tangle ../../.hugo-out/assets/css/cromulent.css
  header pre {
      color: #999;
  }
#+end_src

***** Footer

#+begin_src html :tangle ../../.hugo-out/layouts/partials/footer.html
  <address>
      Ross A. Baker
      <a href="https://pronoun.is/he">(he/him)</a>
  </address>
#+end_src

*** Build

The website is just another package in our flake.

#+begin_src nix :tangle ../../gen/website/default.nix
  { src, emacsNativeComp, hugo, stdenv }:

  let
    siteEmacs = emacsNativeComp.pkgs.withPackages (epkgs: [
      epkgs.ox-hugo
    ]);
  in
  stdenv.mkDerivation rec {
    name = "rossabaker.com";
    inherit src;
    buildInputs = [ siteEmacs hugo ];
    buildPhase = ''
      cd ..
      ${siteEmacs}/bin/emacs -Q --batch --script ${./export.el}
      ${hugo}/bin/hugo --config .hugo-out/config.toml
    '';
    installPhase = ''
      mkdir $out
      cp -r public/. $out
    '';
  }
#+end_src

~export.el~ is a small Emacs script that finds the Org file and
exports its contents with ox-hugo.

#+begin_src emacs-lisp :tangle ../../gen/website/export.el
  (require 'ox-hugo)
  (require 'ob-shell)

  (find-file "src/org/rossabaker.org")
  (setq org-confirm-babel-evaluate nil)
  (org-babel-tangle)
  (mkdir "../../.hugo-out/static")
  (org-hugo-export-wim-to-md t)
#+end_src

**** Local Nix build

To build the site locally into ~./result~, run:

#+begin_src sh :tangle no
  nix build .#website
#+end_src

**** Development

For a more iterative experience with live reload in the browser, try:

#+begin_src sh :tangle no
  hugo serve --disableFastRender --config .hugo-out/config.toml
#+end_src
